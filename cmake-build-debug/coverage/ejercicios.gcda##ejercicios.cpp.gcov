        -:    0:Source:C:/Users/berin/Documents/facultad/exactas/1ero/ALGO 1/tpi2/ejercicios.cpp
        -:    0:Graph:C:\Users\berin\Documents\facultad\exactas\1ero\ALGO 1\tpi2\cmake-build-debug\CMakeFiles\tpi2.dir\ejercicios.gcno
        -:    0:Data:C:\Users\berin\Documents\facultad\exactas\1ero\ALGO 1\tpi2\cmake-build-debug\CMakeFiles\tpi2.dir\ejercicios.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Este archivo contiene las definiciones de las funciones que implementan los ejercicios
        -:    3://
        -:    4:
        -:    5:#include <stdio.h>
        -:    6:#include <iostream>
        -:    7:#include "definiciones.h"
        -:    8:#include "ejercicios.h"
        -:    9:#include "auxiliares.h"
        -:   10:
        -:   11:using namespace std;
        -:   12:
        -:   13:/******++++**************************** EJERCICIO minasAdyacentes ***********+++***********************/
        -:   14:
        -:   15:/*
        -:   16: Sea cual sea la posicion y el tamano del tablero, pasa 3 veces por el primer loop for y 3 veces en el segundo loop for  por cada una de las 3 del primero, // o sea que entra 9 veces al segundo loop for.
        -:   17: Es decir, al pasarle una posicion itera la misma cantidad de veces sin importar el tamaño del tablero de entrada.
        -:   18: Por lo tanto la complejidad temporal es de orden O(1).
        -:   19: */
        -:   20:
function _Z15minasAdyacentesRSt6vectorIS_IbSaIbEESaIS1_EESt4pairIiiE called 98 returned 100% blocks executed 90%
       98:   21:int minasAdyacentes(tablero& t, pos p) {
        -:   22:
       98:   23:    int minas = 0;
       98:   24:    int p0 = p.first;
       98:   25:    int p1 = p.second;
        -:   26:
      392:   27:    for(int fila = -1; fila<=1; fila++){
       98:   27-block  0
      294:   27-block  1
      392:   27-block  2
branch  0 taken 294
branch  1 taken 98 (fallthrough)
     1176:   28:        for(int col = -1; col <=1; col++){
      294:   28-block  0
      882:   28-block  1
     1176:   28-block  2
branch  0 taken 882
branch  1 taken 294 (fallthrough)
        -:   29:
      882:   30:            if (adyacenteValida(t,p, fila, col) && t[p0+fila][p1+col] == cMINA){
      882:   30-block  0
call    0 returned 882
branch  1 taken 882 (fallthrough)
branch  2 taken 0 (throw)
      882:   30-block  1
branch  3 taken 708 (fallthrough)
branch  4 taken 174
      708:   30-block  2
call    5 returned 708
call    6 returned 708
branch  7 taken 708 (fallthrough)
branch  8 taken 0 (throw)
      708:   30-block  3
call    9 returned 708
branch 10 taken 92 (fallthrough)
branch 11 taken 616
       92:   30-block  4
      790:   30-block  5
      882:   30-block  6
branch 12 taken 92 (fallthrough)
branch 13 taken 790
    $$$$$:   30-block  7
       92:   31:                minas++;
       92:   31-block  0
        -:   32:            }
        -:   33:        }
        -:   34:    }
       98:   35:    return minas;
       98:   35-block  0
       98:   35-block  1
        -:   36:}
        -:   37:
        -:   38:/******++++**************************** EJERCICIO cambiarBanderita ***********+++***********************/
        -:   39:
        -:   40:/*
        -:   41: En esta funcion tenemos un loop for que recorre toda la lista de banderitas, y en el peor de los casos se le pasa a la funcion la ultima posicion del tablero,
        -:   42: y dentro de la lista de banderitas estan todas las posiciones del tablero.
        -:   43: Analogamente, con la funcion posicionJugada,que esta dentro de la funcion principal, ocurre lo mismo pero como no estan anidadas no aumento la complejidad.
        -:   44: Teniendo en cuenta esto, podemos decir que la complejidad temporal es de orden O(t.size()) o seria lo mismo decir O(n).
        -:   45:
        -:   46:*/
function _Z16cambiarBanderitaRSt6vectorIS_IbSaIbEESaIS1_EERS_ISt4pairIS5_IiiEiESaIS7_EES6_RS_IS6_SaIS6_EE called 3 returned 100% blocks executed 89%
        3:   47:void cambiarBanderita(tablero& t, jugadas& j, pos p, banderitas& b) {
        -:   48:
        6:   49:    for (int i = 0; i < b.size(); i++){
        3:   49-block  0
        3:   49-block  1
        6:   49-block  2
call    0 returned 6
branch  1 taken 4
branch  2 taken 2 (fallthrough)
        4:   50:        if (b[i] == p){
        4:   50-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 1 (fallthrough)
branch  3 taken 3
        1:   51:            b.erase(b.begin()+i);
        1:   51-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:   51-block  1
    $$$$$:   51-block  2
        1:   52:            return;
        1:   52-block  0
        -:   53:        }
        -:   54:    }
        2:   55:    bool posJugada = posicionJugada(j,p);
        2:   55-block  0
call    0 returned 2
        2:   56:    if (not(posJugada)){
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   57:        b.push_back(p);
        1:   57-block  0
call    0 returned 1
        -:   58:    }
        -:   59:}
        -:   60:
        -:   61:/******++++**************************** EJERCICIO perdio ***********+++***********************/
        -:   62:
        -:   63:/*
        -:   64: En este ejercicio tenemos una funcion depende temporalmente de lista de jugadas que en el peor de los casos contiene al tablero entero
        -:   65: Por lo tanto la complejidad temporal es de orden O(j.size()), que seria lo mismo a decir O(n).
        -:   66: */
        -:   67:
function _Z6perdioRSt6vectorIS_IbSaIbEESaIS1_EERS_ISt4pairIS5_IiiEiESaIS7_EE called 8 returned 100% blocks executed 93%
        8:   68:bool perdio(tablero& t, jugadas& j) {
        -:   69:
        8:   70:    bool res = false;
       68:   71:    for (int i = 0; i < j.size(); i++){
        8:   71-block  0
       60:   71-block  1
       68:   71-block  2
call    0 returned 68
branch  1 taken 60
branch  2 taken 8 (fallthrough)
        -:   72:
       60:   73:        pair<int,int> p = j[i].first;
       60:   73-block  0
call    0 returned 60
       60:   74:        int p0 = p.first;
       60:   75:        int p1 = p.second;
        -:   76:
       60:   77:        if (t[p0][p1] == cMINA){
call    0 returned 60
call    1 returned 60
branch  2 taken 60 (fallthrough)
branch  3 taken 0 (throw)
       60:   77-block  0
call    4 returned 60
branch  5 taken 3 (fallthrough)
branch  6 taken 57
    $$$$$:   77-block  1
        3:   78:            res = true;
        3:   78-block  0
        -:   79:        }
        -:   80:    }
        8:   81:    return res;
        8:   81-block  0
        8:   81-block  1
        -:   82:}
        -:   83:
        -:   84:/******++++**************************** EJERCICIO gano ***********+++***********************/
        -:   85:
        -:   86:/*
        -:   87: En este ejercicio tenemos una funcion dentro de la principal llamada CasillasVacias(t) que recorre el tablero  entero y devuelve un vector de posiciones, con aquellas que estan vacias.
        -:   88: En el peor de los casos, el tablero esta lleno de casillas vacias y fueron todas jugadas.
        -:   89: Se itera sobre la cantidad de posiciones vacias y luego dentro de la funcion posicionJugada(j,p).
        -:   90: Por lo tanto la complejidad temporal resutante es de orden O(n²).
        -:   91:*/
        -:   92:
        -:   93:
        -:   94://bool gano(tablero& t, jugadas& j) {
        -:   95://
        -:   96://    vector<pos> posicionesDeCasillasVacias = CasillasVacias(t);
        -:   97://
        -:   98://    int contador = 0;
        -:   99://
        -:  100://    for (int i = 0; i < posicionesDeCasillasVacias.size(); i++){
        -:  101://        pos p = posicionesDeCasillasVacias[i];
        -:  102://        if (posicionValida(t,p)){
        -:  103://            if (posicionJugada(j,p)){
        -:  104://                contador++;
        -:  105://            }
        -:  106://        }
        -:  107://    }
        -:  108://    bool res = (contador == posicionesDeCasillasVacias.size());
        -:  109://    return res;
        -:  110://}
        -:  111:
        -:  112:
        -:  113://bool gano(tablero& t, jugadas& j) {
        -:  114://
        -:  115://    int contador = 0;
        -:  116://
        -:  117://    for (int i = 0; i < t.size(); i++){
        -:  118://        for (int k = 0; k < t[0].size(); k++){
        -:  119://            if (t[i][k] == cMINA){
        -:  120://                contador--;
        -:  121://                pos p = make_pair(i,k);
        -:  122://                if (posicionJugada(j,p)){
        -:  123://                    return false;
        -:  124://                }
        -:  125://            }
        -:  126://            contador++;
        -:  127://        }
        -:  128://    }
        -:  129://    bool res = (contador == t.size());
        -:  130://    return res;
        -:  131://}
        -:  132:
function _Z4ganoRSt6vectorIS_IbSaIbEESaIS1_EERS_ISt4pairIS5_IiiEiESaIS7_EE called 5 returned 100% blocks executed 90%
        5:  133:bool gano(tablero& t, jugadas& j) {
        -:  134:
        5:  135:    int res = true;
        -:  136:
        5:  137:    if (perdio(t,j)){
        5:  137-block  0
call    0 returned 5
branch  1 taken 2 (fallthrough)
branch  2 taken 3
        2:  138:        res = false;
        2:  138-block  0
        -:  139:    }
       30:  140:    for (int i = 0; i < t.size(); i++){
        5:  140-block  0
       25:  140-block  1
       30:  140-block  2
call    0 returned 30
branch  1 taken 25
branch  2 taken 5 (fallthrough)
      150:  141:        for (int k = 0; k < t[0].size(); k++){
       25:  141-block  0
      125:  141-block  1
      150:  141-block  2
call    0 returned 150
call    1 returned 150
branch  2 taken 125
branch  3 taken 25 (fallthrough)
      125:  142:            pos p = make_pair(i,k);
      125:  142-block  0
call    0 returned 125
branch  1 taken 125 (fallthrough)
branch  2 taken 0 (throw)
      125:  143:            if (t[i][k] == cVACIA && !posicionJugada(j,p)){
      125:  143-block  0
call    0 returned 125
call    1 returned 125
branch  2 taken 125 (fallthrough)
branch  3 taken 0 (throw)
      125:  143-block  1
call    4 returned 125
branch  5 taken 95 (fallthrough)
branch  6 taken 30
       95:  143-block  2
call    7 returned 95
branch  8 taken 95 (fallthrough)
branch  9 taken 0 (throw)
       95:  143-block  3
branch 10 taken 45 (fallthrough)
branch 11 taken 50
       45:  143-block  4
       80:  143-block  5
      125:  143-block  6
branch 12 taken 45 (fallthrough)
branch 13 taken 80
    $$$$$:  143-block  7
       45:  144:                    res = false;
       45:  144-block  0
        -:  145:            }
        -:  146:        }
        -:  147:    }
        5:  148:    return res;
        5:  148-block  0
        5:  148-block  1
        -:  149:}
        -:  150:
        -:  151:
        -:  152:
        -:  153:
        -:  154:/******++++**************************** EJERCICIO jugarPlus ***********+++***********************/
        -:  155:
        -:  156:/*
        -:  157: Esta funcion se fija que la posicion que se le pasa como parametro no este jugada ni tenga una banderita, se le calcula la cantidad de minas adyacentes y se la agrega a la lista de jugadas.
        -:  158: Luego se fija que sea una posicion vacia y que no tenga minas adyacentes, y si esto es asi, recorre por medio de dos loop for para descubrir todas esas posiciones.
        -:  159: Y asi con todas esas posiciones descubiertas se hace lo mismo llamando otra vez a la funcion, que es entonces recursiva.
        -:  160: En el peor de los casos, el tablero esta completamente lleno de casillas vacias y todas fueron jugadas.
        -:  161: Al ser una funcion recursiva no se puede calcular la complejidad temporal, pero sabemos que en el peor de los casos se itera sobre todas las posiciones del tablero.
        -:  162: Podemos decir que las condiciones pedidas en la funcion aseguran la terminacion de la misma.
        -:  163:
        -:  164:*/
        -:  165:
        -:  166:
function _Z9jugarPlusRSt6vectorIS_IbSaIbEESaIS1_EERS_ISt4pairIiiESaIS6_EES6_RS_IS5_IS6_iESaISA_EE called 10 returned 100% blocks executed 79%
       10:  167:void jugarPlus(tablero& t, banderitas& b, pos p, jugadas& j) {
        -:  168:
       10:  169:    bool posJugada = posicionJugada(j,p);
       10:  169-block  0
call    0 returned 10
       10:  170:    bool posBanderita = posicionTieneBanderita(b,p);
call    0 returned 10
        -:  171:
       10:  172:    if (not posJugada && not posBanderita){
branch  0 taken 7 (fallthrough)
branch  1 taken 3
        7:  172-block  0
branch  2 taken 6 (fallthrough)
branch  3 taken 1
        -:  173:
        6:  174:        int cantidadMinasAdyacentes = minasAdyacentes(t,p);
        6:  174-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:  175:        j.push_back(make_pair(p, cantidadMinasAdyacentes));
        6:  175-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:  175-block  1
call    3 returned 6
branch  4 taken 6 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  175-block  2
        -:  176:
        6:  177:        if (t[p.first][p.second] == cVACIA){
        6:  177-block  0
call    0 returned 6
call    1 returned 6
branch  2 taken 6 (fallthrough)
branch  3 taken 0 (throw)
        6:  177-block  1
call    4 returned 6
branch  5 taken 5 (fallthrough)
branch  6 taken 1
    $$$$$:  177-block  2
        5:  178:            if (cantidadMinasAdyacentes == 0){
        5:  178-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        4:  179:                for(int fila = -1; fila<=1; fila++){
        1:  179-block  0
        3:  179-block  1
        4:  179-block  2
branch  0 taken 3
branch  1 taken 1 (fallthrough)
       12:  180:                    for(int col = -1; col <=1; col++){
        3:  180-block  0
        9:  180-block  1
       12:  180-block  2
branch  0 taken 9
branch  1 taken 3 (fallthrough)
        9:  181:                        if (adyacenteValida(t,p, fila, col)){
        9:  181-block  0
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
        9:  181-block  1
branch  3 taken 5 (fallthrough)
branch  4 taken 4
        5:  182:                            pos q = make_pair(p.first+fila, p.second+col);
        5:  182-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:  182-block  1
    $$$$$:  182-block  2
        5:  183:                            jugarPlus(t, b, q, j);
        5:  183-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        -:  184:                        }
        -:  185:                    }
        -:  186:                }
        -:  187:            }
        -:  188:        }
        -:  189:    }
       10:  190:}
       10:  190-block  0
        -:  191:
        -:  192:/******++++**************************** EJERCICIO sugerirAutomatico121 ***********+++***********************/
        -:  193:
        -:  194:/*
        -:  195: De lo que se encarga la funcion es de buscar una posicion que cumpla con la especificacion pedida.
        -:  196: Recorre el tablero, y si encuentra una posicion que cumpla que este sin jugar ni tenga banderita y sea adyacente a un patron 121, la envia a lista de jugadas, y luego devuelve la posicion y true.
        -:  197: En el peor de los casos, el patron 121 se encuentra muy carca del borde inferior derecho del tablero y se tienen que probar practicamente todas las posiciones del tablero para encontrar la posicion.
        -:  198: Por un lado dos primero dos for anidados que recorren el tablero tienen una complejidad de O(n²).
        -:  199: Luego, esPosicionSinJugarYSinBanderita tiene una complejidad de O(n²) y esAdyacente121 de O(n^12).
        -:  200: Por lo tanto la complejidad temporal de la funcion total es de orden O(n^16).
        -:  201:
        -:  202:*/
        -:  203:
function _Z20sugerirAutomatico121RSt6vectorIS_IbSaIbEESaIS1_EERS_ISt4pairIiiESaIS6_EERS_IS5_IS6_iESaISA_EERS6_ called 6 returned 100% blocks executed 85%
        6:  204:bool sugerirAutomatico121(tablero& t, banderitas& b, jugadas& j, pos& p) {
        -:  205:
        6:  206:    bool hay = false;
       28:  207:    for (int i = 0; i < t.size(); i++){
        6:  207-block  0
       22:  207-block  1
       28:  207-block  2
call    0 returned 28
branch  1 taken 24
branch  2 taken 4 (fallthrough)
      136:  208:        for (int k = 0; k < t[0].size(); k++){
       24:  208-block  0
      112:  208-block  1
      136:  208-block  2
call    0 returned 136
call    1 returned 136
branch  2 taken 114
branch  3 taken 22 (fallthrough)
        -:  209:
      114:  210:            pos q = make_pair(i,k);
      114:  210-block  0
call    0 returned 114
branch  1 taken 114 (fallthrough)
branch  2 taken 0 (throw)
      114:  211:            if (esPosicionSinJugarYSinBanderita(t,j,b,q) && esAdyacente121(q, j, t)){
      114:  211-block  0
call    0 returned 114
branch  1 taken 114 (fallthrough)
branch  2 taken 0 (throw)
      114:  211-block  1
branch  3 taken 76 (fallthrough)
branch  4 taken 38
       76:  211-block  2
call    5 returned 76
branch  6 taken 76 (fallthrough)
branch  7 taken 0 (throw)
       76:  211-block  3
branch  8 taken 2 (fallthrough)
branch  9 taken 74
        2:  211-block  4
      112:  211-block  5
      114:  211-block  6
branch 10 taken 2 (fallthrough)
branch 11 taken 112
        2:  212:                if (t[i][k] == cVACIA) {
        2:  212-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:  212-block  1
call    4 returned 2
branch  5 taken 2 (fallthrough)
branch  6 taken 0
    $$$$$:  212-block  2
        2:  213:                    p = q;
        2:  213-block  0
call    0 returned 2
        2:  214:                    j.push_back(make_pair(p, minasAdyacentes(t, p)));
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  214-block  0
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2:  214-block  1
call    6 returned 2
branch  7 taken 2 (fallthrough)
branch  8 taken 0 (throw)
    $$$$$:  214-block  2
    $$$$$:  214-block  3
        2:  215:                    hay = true;
        2:  216:                    return hay;
        2:  216-block  0
        -:  217:                }
        -:  218:            }
        -:  219:        }
        -:  220:    }
        4:  221:    return hay;
        4:  221-block  0
        -:  222:}
